AWSTemplateFormatVersion: "2010-09-09"
Description: "EC2 Stack"

Parameters:
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  EC2SecurityGroup:
    Type: String
  VPC:
    Type: String
  EC2InstanceProfile:
    Type: String
  KeyName:
    Type: String
    Description: "The name of an existing EC2 KeyPair for SSH access"
    Default: "NewKey"
  WebACLArn:
    Type: String
  ACMArn:
    Type: String

Resources:
  #####################################
  # EC2
  #####################################
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        KeyName: !Ref KeyName
        ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}"
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        # インストールスクリプト
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello from EC2 via CloudFormation</h1>" > /var/www/html/index.html

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1 #  最低 1 台は動作させる
      MaxSize: 2 # 最大 2 台までスケール
      DesiredCapacity: 1
      TargetGroupARNs: # ALB に自動で EC2 を登録
        - !Ref TargetGroup

  #####################################
  # CloudFront
  #####################################
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - "hiroto-soda.com"
        DefaultRootObject: "index.html" # TODO
        Origins:
          - DomainName: !GetAtt LoadBalancer.DNSName
            Id: LoadBalancerOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              # OriginProtocolPolicy: http-only
              # OriginProtocolPolicy: match-viewer
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: LoadBalancerOrigin
          Compress: true
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          DefaultTTL: 86400 # デフォルトのTTL（1日）
          MinTTL: 0 # 最小TTL
          MaxTTL: 31536000 # 最大TTL（1年）
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        WebACLId: !Ref WebACLArn

  #####################################
  # Elastic Load Balancer
  #####################################
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EC2SecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
        - Key: deletion_protection.enabled
          Value: "false" # 本番環境なら true にする

  # LoadBalancerListenerHTTP:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Protocol: HTTP
  #     Port: 80
  #     DefaultActions:
  #       - Type: redirect
  #         RedirectConfig:
  #           Protocol: HTTPS
  #           Port: "443"
  #           StatusCode: HTTP_301

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref ACMArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  #####################################
  # Route 53
  #####################################
  # デフォルトで作られる
  # HostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Properties:
  #     Name: hiroto-soda.com

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: "hiroto-soda.com."
      Name: "hiroto-soda.com"
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront の固定 Hosted Zone ID
